#!/usr/bin/env python

# Copyright (C) 2015 Mark Schouten <mark@tuxis.nl>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# See http://www.gnu.org/licenses/gpl.txt for the full license

from yaml import load, dump
from os import listdir, devnull
from pprint import pprint
from subprocess import call, check_output, STDOUT

CONFDIR = '/usr/local/sbin/zones'
OUTCONF = '/etc/powerdns/geoip.zones'

document = ""

FNULL = open(devnull, 'w')

def conf_in():
    global document
    f = open('/'.join([CONFDIR, 'cdn.tuxis.nl.yaml']))
    document = load(f.read())

def check_node(n):
    c = []
    ret = []
    doret = False
    for f in n:
        for k, v in f.iteritems():
            if k == 'check':
                check = v
            else:
                c.append({k:v})

    for r in c:
        for k, v in r.iteritems():
            if k in ['a', 'aaaa']:
                if check == "http":
                    retcode = call(["/usr/lib/nagios/plugins/check_http", "-I", v, '-u /alive.html', '-t 2'], stdout=FNULL, stderr=STDOUT)
                if retcode == 0:
                    doret = True
                    ret.append({k:v})
            else:
                ret.append({k:v})

    if doret:
        return ret
    else:
        return False

def getnodes(doc):
    ret = {}
    ret['domains'] = []
    for dom in doc['domains']:
        newdom = {}
        for t in ['ttl', 'domain', 'services']:
            try:
                newdom[t] = dom[t]
            except:
                pass
        newdom['records'] = {}
        for r in dom['records'].iteritems():
            add = r[1]
            for v in r[1]:
                try:
                    if v['check']:
                        add = check_node(r[1])
                except Exception, e:
                    pass
            if add != False:
                newdom['records'][r[0]] = add
        ret['domains'].append(newdom)

    return ret

def conf_out(doc):
    try:
        f = open(OUTCONF, 'w')
        f.write(dump(doc))
        f.close()
    except:
        print "Could not write new config file %s!" % (OUTCONF)

conf_in();

newdoc = getnodes(document)

conf_out(newdoc)
