#!/usr/bin/env python

# Copyright (C) 2015 Mark Schouten <mark@tuxis.nl>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; version 2 dated June,
# 1991.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# See http://www.gnu.org/licenses/gpl.txt for the full license

from yaml import load, dump
import sys
from os import listdir, devnull
from copy import deepcopy
from pprint import pprint
from subprocess import call, check_output, STDOUT

try:
    readfile = sys.argv[1]
except:
    print "Enter a filename to read"
    sys.exit(1)

document = ""

FNULL = open(devnull, 'w')

class Node():
    def __init__(self, name):
        self.name = name
        self.a    = []
        self.aaaa = []
        self.ct   = []
        self.asn  = []
        self.zone = None

    def set_zone(self, z):
        self.zone = z

    def add_addr(self, addr):
        if ":" in addr:
            self.add_aaaa(addr)
        else:
            self.add_a(addr)

    def add_a(self, addr):
        self.a.append(addr)

    def add_aaaa(self, addr):
        self.aaaa.append(addr)

    def add_asn(self, asnr):
        self.asn.append(asnr)

    def add_ct(self, country):
        self.ct.append(country)

    def has_addr(self):
        if len(self.a) > 0 or len(self.aaaa) > 0:
            return True

        return False

    def get_addrs(self):
        ret = []
        for a in self.aaaa:
            ret.append({'aaaa': a})
        for a in self.a:
            ret.append({'a': a})

        return ret

    def get_rrs(self):
        if not self.zone:
            print "Set a zone name"
            return False

        rr = {}

        for ct in self.ct:
            l = "%s.%s" % (ct, self.zone)
            rr[l] = self.get_addrs()

        for asnr in self.asn:
            l = "as%s.%s" % (asnr, self.zone)
            rr[l] = self.get_addrs()
            for ct in self.ct:
                l = "as%s.%s.%s" % (asnr, ct, self.zone)
                rr[l] = self.get_addrs()

        return rr

    def export(self):
        pprint (vars(self))

def read_conf():
    global document
    try:
        f = open(readfile)
    except Exception, e:
        print "Could not open file %s: %s" % (readfile, e)
        exit(1)

    document = load(f.read())

def check_node(n):
    retcode = call(["/usr/lib/nagios/plugins/check_tcp", "-H", n, "-p 80", "-t 2"], stdout=FNULL, stderr=STDOUT)
    if retcode == 0:
        return True

    return False

def getnodes(doc):
    nodes = []
    for z, zd in enumerate(doc['domains']):
        for n, nd in zd['nodes'].iteritems():
            node = Node(n)
            for k in [ 'ipv4', 'ipv6']:
                if check_node(nd[k]):
                    node.add_addr(nd[k])

            if node.has_addr():
                for asn in nd['asns']:
                    node.add_asn(asn)
                for ct in nd['countries']:
                    node.add_ct(ct)

                nodes.append(node)

    return nodes

def write_conf(doc, nodes):
    newdoc = {}
    newdoc['domains'] = []

    for z, zd in enumerate(doc['domains']):
        zone = {}
        zone['domain'] = zd['domain']
        zone['ttl'] = zd['ttl']
        zone['records'] = zd['records']
        zone['services'] = zd['services']
        del zd['nodes']
        for n in nodes:
            n.set_zone(zd['domain'])
            for l, ld in n.get_rrs().iteritems():
                zone['records'][l] = ld

        newdoc['domains'].append(zone)

    try:
        print dump(newdoc)
    except:
        print "Could not write new config file %s!" % (OUTCONF)


read_conf();

nodes = getnodes(document)

write_conf(document, nodes)
